#include <stdio.h>
#include <string.h>
#include <dirent.h>


int main(int argc, char* argv[]) {
    listFiles(".");
    return 0;
}
void listFiles(const char* dirname) {
    DIR* dir = opendir(dirname);
    if (dir == NULL) {
        return;
    }

    printf("Reading files in: %s\n", dirname);

    struct dirent* entity;
    entity = readdir(dir);
    while (entity != NULL) {
        printf("%hdd %s/%s\n", entity->d_type, dirname, entity->d_name);
        if (entity->d_type == DT_DIR && strcmp(entity->d_name, ".") != 0 && strcmp(entity->d_name, "..") != 0) {
            char path[100] = { 0 };
            strcat(path, dirname);
            strcat(path, "/");
            strcat(path, entity->d_name);
            listFiles(path);
        }
        entity = readdir(dir);
    }

    closedir(dir);
}



#include <stdio.h>
#include <dirent.h>
#include <sys/stat.h>
#include <unistd.h>
#include <time.h>

int main()
{
    DIR *folder;
    struct dirent *entry;
    struct stat filestat;
    char cwdpath[256];
    int count = 1;
    long long total = 0;

    folder = opendir(".");
    if(folder == NULL)
    {
        perror("Unable to read directory");
        return(1);
    }

    /* State directory name */
    getcwd(cwdpath,256);
    printf(" Directory of %s\n\n",cwdpath);

    /* Read directory entries */
    while( (entry=readdir(folder)) )
    {
        /* Extract Filename */
        stat(entry->d_name,&filestat);
        printf("%-16s",entry->d_name);

        /* Extract Size */
        if( S_ISDIR(filestat.st_mode) )
            printf("%-8s  ","<DIR>");
        else
        {
            printf("%8lld  ",filestat.st_size);
            total+=filestat.st_size;
        }

        /* Extract create date and time */
        printf("%s",ctime(&filestat.st_mtime));
    }

    closedir(folder);
    printf("\n        %d File(s) for %lld bytes\n",
            count,
            total
          );

    return(0);
}
